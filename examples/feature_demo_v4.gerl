// GerLang v4.0.0 Feature-Demo - Alle neuen Features in einem Programm
GANZ haupt() {
    DRUCKE("=== ü•® GerLang v4.0.0 Feature-Demo ===");
    DRUCKE("");
    
    // 1. String-Interpolation
    DRUCKE("üìù STRING-INTERPOLATION:");
    WORT name = "Max";
    GANZ alter = 25;
    DRUCKE("Hallo ${name}, du bist ${alter} Jahre alt!");
    DRUCKE("N√§chstes Jahr wirst du ${alter + 1} sein.");
    DRUCKE("");
    
    // 2. Math-Funktionen
    DRUCKE("üî¢ MATH-FUNKTIONEN:");
    KOMMA wurzel_16 = WURZEL(16);
    KOMMA potenz_2_3 = POTENZ(2, 3);
    KOMMA betrag = ABS(-42);
    KOMMA gerundet = RUNDEN(3.14159, 2);
    
    DRUCKE("WURZEL(16) = ${wurzel_16}");
    DRUCKE("POTENZ(2, 3) = ${potenz_2_3}");
    DRUCKE("ABS(-42) = ${betrag}");
    DRUCKE("RUNDEN(3.14159, 2) = ${gerundet}");
    DRUCKE("");
    
    // 3. Zufallszahlen
    DRUCKE("üé≤ ZUFALLSZAHLEN:");
    KOMMA zufall = ZUFALLSZAHL();
    GANZ w√ºrfel1 = ZUFALLSBEREICH(1, 6);
    GANZ w√ºrfel2 = ZUFALLSBEREICH(1, 6);
    DRUCKE("Zufallszahl (0-1): ${zufall}");
    DRUCKE("W√ºrfel 1: ${w√ºrfel1}, W√ºrfel 2: ${w√ºrfel2}");
    DRUCKE("");
    
    // 4. Typ-Konvertierung
    DRUCKE("üîÑ TYP-KONVERTIERUNG:");
    WORT zahl_text = "123";
    GANZ konvertiert = ZU_GANZ(zahl_text);
    WORT zur√ºck_zu_text = ZU_WORT(konvertiert * 2);
    DRUCKE("'${zahl_text}' als Zahl: ${konvertiert}");
    DRUCKE("${konvertiert} * 2 als Text: '${zur√ºck_zu_text}'");
    DRUCKE("");
    
    // 5. Arrays mit Methoden
    DRUCKE("üìä ARRAYS & METHODEN:");
    KISTE zahlen = [10, 20, 30];
    zahlen.HINZUF√úGEN(40);
    DRUCKE("Array: [${zahlen[0]}, ${zahlen[1]}, ${zahlen[2]}, ${zahlen[3]}]");
    DRUCKE("Array-L√§nge: ${zahlen.L√ÑNGE}");
    DRUCKE("");
    
    // 6. Fehlerbehandlung mit String-Interpolation
    DRUCKE("üõ°Ô∏è FEHLERBEHANDLUNG:");
    VERSUCHE() {
        GANZ result = 10 / 0;  // Division durch Null
        DRUCKE("Das sollte nicht funktionieren: ${result}");
    } FANGE fehler {
        DRUCKE("‚úÖ Fehler erfolgreich abgefangen: ${fehler}");
    }
    DRUCKE("");
    
    // 7. Komplexe Berechnungen
    DRUCKE("üßÆ KOMPLEXE BERECHNUNGEN:");
    KOMMA radius = 5.0;
    KOMMA kreisfl√§che = POTENZ(radius, 2) * 3.14159;
    KOMMA umfang = 2 * 3.14159 * radius;
    
    DRUCKE("Kreis mit Radius ${radius}:");
    DRUCKE("  Fl√§che: ${RUNDEN(kreisfl√§che, 2)}");
    DRUCKE("  Umfang: ${RUNDEN(umfang, 2)}");
    DRUCKE("");
    
    DRUCKE("üéâ Alle v4.0.0 Features erfolgreich demonstriert!");
    DRUCKE("‚ú® GerLang ist jetzt noch m√§chtiger und benutzerfreundlicher!");
    
    ZUR√úCK 0;
}
