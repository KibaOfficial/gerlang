// ==============================
// GerLang V4 - Feature Demo
// Zeigt alle neuen Features der Version 4.0
// ==============================

// Import-System Demo
HOLE fibonacci VON "examples/fibonacci.gerl";
HOLE sayHello VON "examples/functions.gerl";

GANZ haupt() {
    DRUCKE("🥨 GerLang V4.0 - Feature Demonstration");
    DRUCKE("=====================================");
    
    // === 1. STRING-INTERPOLATION ===
    DRUCKE("\n📝 1. String-Interpolation:");
    WORT name = "GerLang";
    GANZ version = 4;
    KOMMA pi = 3.14159;
    
    DRUCKE("Willkommen zu ${name} Version ${version}!");
    DRUCKE("Pi ist ungefähr ${pi}");
    DRUCKE("Berechnung: 2 + 3 = ${2 + 3}");
    
    // === 2. ERWEITERTE ARRAY-FUNKTIONEN ===
    DRUCKE("\n📦 2. Array-Methoden:");
    KISTE nummern = [1, 2, 3];
    DRUCKE("Original Array: ${nummern}");
    
    nummern.ERWEITERN(4);
    DRUCKE("Nach ERWEITERN(4): ${nummern}");
    
    nummern.HINZUFÜGEN(0);
    DRUCKE("Nach HINZUFÜGEN(0): ${nummern}");
    DRUCKE("Array-Länge: ${nummern.LÄNGE}");
    
    // === 3. MATH-FUNKTIONEN ===
    DRUCKE("\n🔢 3. Mathematische Funktionen:");
    DRUCKE("Wurzel aus 16: ${WURZEL(16)}");
    DRUCKE("2 hoch 8: ${POTENZ(2, 8)}");
    DRUCKE("Betrag von -42: ${ABS(-42)}");
    DRUCKE("3.7 gerundet: ${RUNDEN(3.7)}");
    DRUCKE("Zufallszahl (1-100): ${ZUFALLSBEREICH(1, 100)}");
    
    // === 4. TYPE-CONVERSION ===
    DRUCKE("\n🔄 4. Typ-Konvertierung:");
    WORT zahl_als_text = "42";
    GANZ konvertiert = ZU_GANZ(zahl_als_text);
    DRUCKE("'${zahl_als_text}' als Zahl: ${konvertiert}");
    
    KOMMA komma_zahl = ZU_KOMMA("3.14");
    DRUCKE("'3.14' als Kommazahl: ${komma_zahl}");
    
    // === 5. FEHLERBEHANDLUNG ===
    DRUCKE("\n⚠️  5. Fehlerbehandlung:");
    VERSUCHE() {
        GANZ fehler = ZU_GANZ("keine_zahl");
        DRUCKE("Dies wird nicht ausgeführt");
    } FANGE fehler {
        DRUCKE("Fehler abgefangen: ${fehler}");
    }
    
    // === 6. FUNKTIONEN MIT RETURN-WERTEN ===
    DRUCKE("\n🔧 6. Funktionen:");
    GANZ fib_result = fibonacci(10);
    DRUCKE("Fibonacci(10) = ${fib_result}");
    
    sayHello("Welt");
    
    // === 7. KONTROLLSTRUKTUREN ===
    DRUCKE("\n🔄 7. Schleifen und Bedingungen:");
    
    // For-Loop
    DRUCKE("Countdown:");
    FÜR (GANZ i = 5; i > 0; i = i - 1) {
        DRUCKE("${i}...");
    }
    DRUCKE("Start! 🚀");
    
    // While mit Bedingung
    GANZ counter = 0;
    SOLANGE (counter < 3) {
        DRUCKE("Counter: ${counter}");
        counter = counter + 1;
    }
    
    // === 8. MEHRDIMENSIONALE ARRAYS ===
    DRUCKE("\n📊 8. Mehrdimensionale Arrays:");
    KISTE matrix = [[1, 2], [3, 4], [5, 6]];
    DRUCKE("Matrix: ${matrix}");
    DRUCKE("Element [1][0]: ${matrix[1][0]}");
    
    // Matrix durchlaufen
    FÜR (GANZ row = 0; row < matrix.LÄNGE; row = row + 1) {
        KISTE zeile = matrix[row];
        DRUCKE("Zeile ${row}: ${zeile}");
    }
    
    DRUCKE("\n✅ Feature-Demo abgeschlossen!");
    DRUCKE("🎉 GerLang V4.0 funktioniert perfekt!");
    
    ZURÜCK 0;
}
